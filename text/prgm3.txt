10011 00001 0000000000000001100100         ; SETREG: set rbx (base pointer register) equal to 100
01110 00111 00001 00000000000000000        ; EQU: set the value in rsp (stack pointer) equal to rbx
10011 01000 0000000000000000000101         ; SETREG: r1 = 5
00110 0 01000 000000000000000000000        ; push r1 onto stack
10011 01000 0000000000000000001010         ; SETREG: r1 = 10
00110 0 01000 000000000000000000000        ; push r1 onto stack
10011 01000 0000000000000000000101         ; SETREG: r1 = 5
00110 0 01000 000000000000000000000        ; push r1 onto stack
10011 01000 0000000000000000001010         ; SETREG: r1 = 10
00110 0 01000 000000000000000000000        ; push r1 onto stack
00110 1 01001 000000000000000000000        ; pop last value of stack into r2 (10)
00110 1 01010 000000000000000000000        ; pop last value of stack into r3 (5)
10000 01001 01010 00000000000000000        ; multiply r2 by r3 and store result in r2
00110 1 01010 000000000000000000000        ; pop last value of stack into r3 (10)
00110 1 01011 000000000000000000000        ; pop last value of stack into r4 (5)
10011 01000 0000000000000000101000         ; SETREG: r1 = 20
10010 01000 0000000000000000000000         ; CALL: jump to address 20 (stored in r1) and push return address onto stack
10011 01101 0000000000000000001111         ; SETREG: set r6 = 15
10011 01110 0000000000000000001110         ; SETREG: set r7 = 14
10011 01111 0000000000000000011001         ; SETREG: set r8 = 25
00011 01101 01110 00000000000000000        ; CMP: compare r6 to r7
00100 00011 01111 00000000000000000        ; JMPIF: jump to address 25 (stored in r8) if r6 equal to r7
10011 10000 0000000000000000100011         ; SETREG: set rip equal to address 35 (jump to the end of the program)
;
;
10011 00000 0000000000000000110011         ; SETREG: set rax equal to 51
00111 00000 00000 00000000000000000        ; store rax's value at memory address 50 (value in rax)
00001 00010 00000 00000000000000000        ; move value at address contained in rax into rcx
;
;
;
;
;
;
;
00000   000000000000000000000000000       ; HLT the program
;
;
;
;
00110 1 01100 000000000000000000000       ; pop return address into r5
01110 10000 01100 00000000000000000       ; jump back to main function by setting rip equal to r5