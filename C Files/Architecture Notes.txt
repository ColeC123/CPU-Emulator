First 5 bits detail the opcode (operation code / instruction code)
registers are 5 bits
addresses are 22 bits

memory operations go destination, then source (like intel syntax)

Operations

HLT (halt) = (opcode) 00000 (remaining bits are undefined for now)

MOV (move value at adress contained in register2 into register1) = (opcode) 00001 (register1) xxxxx (register2) xxxxx (remaining bits undefined)

ADD = (opcode) 00010 (register 1, where result is stored) xxxxx (register 2) xxxxx (remaining bits are undefined for now) -> register1 = register1 + register2

CMP (compare) = (opcode) 00011 (register1) xxxxx (register2) xxxxx (remaining bits are undefined for now)
*Note: CPU flags will be set based on the result of the comparison (these flags are not accessible)

JMPIF (jump if) = (opcode) 00100 (condition) xxxxx (register) xxxxx
Conditions for jumping:
    -00000 = jump if equal
    -00001 = jump if not equal
    -00010 = jump if less than
    -00011 = jump if greater than
    -00100 = jump if less than or equal
    -00101 = jump if greater than or equal

SUB (subtract) = (opcode) 00101 (register1) xxxxx (register2) xxxxx (remaining bits are undefined for now) -> register1 = register1 - register2

PUSH/POP = (opcode) 00110 (push = 0 or pop = 1) x (register) xxxxx
*Note: When using push and pop you should make sure you have initially set rbp and rsp equal to each other.
       You should also ensure that the starting address for rbp and rsp is sufficiently far away from instructions in memory
       This is because the stack grows downwards (rsp is decremented), and a stack overflow is likely to cause corruption of data and possibly instructions
push:
- current value of register placed in memory location rsp points to
- rsp decremented by one
pop:
- current value at memory address in rsp in placed into the register
- rsp is incremented by one

STORE (memory address specified by register1 has its value set equal to value in register2) = (opcode) 00111 (register1) xxxxx (register2) xxxxx (remaining bits undefined)

LBITSHFTR (logical bit shift right 1, meaning right is filled with 0s) = (opcode) 01000 (register1) xxxxx (register2) xxxxx (remaining bits are undefined for now)
*Note: register1 = register1 = register1 >> register2 (register1 is bitshifted right the number of times of the value in register2, and the result in stored in register1)

BITSHFTL (bit shift left 1) = (opcode) 01001 (register1) xxxxx (register2) xxxxx (remaining bits are undefined for now) -> register1 = register1 << register2

AND (bitwise and) = (opcode) 01010 (register1) xxxxx (register2) xxxxx (remaining bits are undefined for now) -> result is stored in register1

XOR (bitiwse xor) = (opcode) 01011 (register1) xxxxx (register2) xxxxx (remaining bits are undefined for now) -> results is stored in register1

OR (bitwise or) = (opcode) 01100 (register1) xxxxx (register2) xxxxx (remaining bits are undefined for now) -> results is stored in register1

NOT (bitwise not) = (opcode) 01101 (register1) xxxxx (register2) xxxxx (remaining bits are undefined for now) -> results is stored in register1

EQU (equals) = (opcode) 01110 (register1) xxxxx (register2) xxxxx (remaining bits are undefined for now) -> register1 = register2 (value in register1 set to value in register2)

*JMP is a unique instruction, since the rip register (instruction pointer) can be modified directly. 
In ordder to jump to a specific address do EQU rip, register. This moves the address to be jumped to directly into the rip register.
In binary this looks like: (equ opcode) 01110 (rip register) 10000 (register) xxxxx

IMUL (integer multiplication) = (opcode) 10000 (register1) xxxxx (register2) xxxxx -> register1 = register1 * register2

IDIV (integer division) = (opcode) 10001 (register1) xxxxx (register2) xxxxx -> register1 = register1 / register2

CALL (call function) = (opcode) 10010 (register, which contains the address of the function to be jumped to) (remaining bits are undefined)

SETREG (set register equal to constant value that is known at program time) = (opcode) 10011 (register) xxxxx (constant value, 22 bits)

Register Information

*Note: The following register purposes are conventions based on real computers. They have predefined
purposes, but can in general be used with any of the operations pertaining to the registers.

rax = accumulator register (used for storing intermediate results of arithmetic and logical operations) = 00000

rbx = base register (used for storing memory address of first location of data in program. You can then access data relative to the base register) = 00001

rcx = program counter register (can be used a counter or to hold intermediate value during calculation) = 00010

rdx = data register (store and manipulate data with this register) = 00011

rsi = source index register (useful for storing memory address of source array) = 00100

rdi = destination index register (useful for storing memory adddress of desitnation or target array) = 00101

rbp = base pointer register (points to the base of the stack (memory)) = 00110

rsp = stack pointer register (points to memory address of last item pushed onto stack) = 00111

The Next 8 registers are general purpose. Use them any way you'd like. (This is subject to change possibly)

r1 = 01000

r2 = 01001

r3 = 01010

r4 = 01011

r5 = 01100

r6 = 01101

r7 = 01110

r8 = 01111

rip = 10000 = instruction pointer (stores the next instruction to be executed. Can also be used for relative addressing. Should not be modified directly)



